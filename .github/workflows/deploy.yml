name: build-and-deploy

on:
  push:
    branches: [prod]

env:
  APP_DIR: /opt/nnp-web
  PM2_NAME: nnp-web
  NODE_VERSION: '20'
  BUILD_DIR: build
  PM2_HOME: /home/dsn/.pm2
  ENV_SOURCE_DIR: /home/dsn/env-nusa

jobs:
  build-deploy:
    runs-on: [self-hosted, Linux, X64, Prod]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure rsync present
        run: |
          if ! command -v rsync >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y rsync
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Debug whoami & perms
        run: |
          echo "USER: $(whoami)"
          id
          ls -ld /opt /opt/nnp-web || true
          mkdir -p "$APP_DIR"
          > "$APP_DIR/.gh-actions-write-test" && echo "write ok" || { echo "::error::Cannot write to $APP_DIR"; exit 1; }

      - name: Sync repo to $APP_DIR (no mtime/dirtime preserve)
        run: |
          set -euo pipefail
          mkdir -p "${APP_DIR}"
          rsync -a --delete --no-times --omit-dir-times \
            --exclude '.git' \
            ./ "${APP_DIR}/"
          echo "Copied repo to $APP_DIR"

      - name: Sync env bundle to $APP_DIR (dotfiles included)
        run: |
          set -euo pipefail
          SRC="${ENV_SOURCE_DIR:-/home/dsn/env-nusa}"
          DEST="${APP_DIR:-/opt/nnp-web}"
          echo "Syncing from $SRC -> $DEST"
          mkdir -p "$DEST"
          if [ -d "$SRC" ]; then
            rsync -a --no-times --omit-dir-times "$SRC"/ "$DEST"/
            find "$DEST" -maxdepth 1 -type f -name ".env*" -exec chmod 600 {} +
            echo "âœ“ Copied env bundle."
          else
            echo "::warning file=$SRC::ENV_SOURCE_DIR not found; skipping env copy"
          fi
          ls -la "$DEST"

      - name: Install deps (include dev)
        working-directory: ${{ env.APP_DIR }}
        run: npm ci --no-audit --no-fund

      - name: Build (Tailwind plugin in devDependencies)
        working-directory: ${{ env.APP_DIR }}
        env:
          NODE_ENV: development
        run: npm run build

      - name: Prune dev deps for runtime
        working-directory: ${{ env.APP_DIR }}
        run: npm prune --omit=dev

      - name: Ensure pm2 (local)
        working-directory: ${{ env.APP_DIR }}
        run: |
          if [ ! -d "node_modules/pm2" ]; then
            npm i -E pm2@latest
          fi

      - name: Ensure PM2_HOME exists
        run: |
          mkdir -p "${PM2_HOME}"

      - name: Restart app with PM2 (local)
        working-directory: ${{ env.APP_DIR }}
        env:
          PM2_HOME: ${{ env.PM2_HOME }}
        run: |
          echo "PM2_HOME=$PM2_HOME"
          which pm2 || true
          npx pm2 -v || true
          npx pm2 delete "${PM2_NAME}" || true
          npx pm2 start ecosystem.config.cjs --only "${PM2_NAME}" --env staging --update-env
          npx pm2 save
          npx pm2 status || true
