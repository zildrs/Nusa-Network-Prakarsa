name: build-and-deploy-staging

on:
  push:
    branches: [master]
  repository_dispatch:
    types: [strapi_publish]

env:
  APP_DIR: /opt/nnp-web
  PM2_NAME: nnp-web
  NODE_VERSION: '20'
  BUILD_DIR: build
  PM2_HOME: /home/manage/.pm2
  # adjust if you ever move the env folder
  ENV_SOURCE_DIR: /home/manage/env-nusa

jobs:
  build-deploy:
    runs-on: [self-hosted, Linux, X64, Staging]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Debug whoami & perms
        run: |
          echo "USER: $(whoami)"
          id
          ls -ld /opt /opt/nnp-web || true
          mkdir -p "$APP_DIR"
          > "$APP_DIR/.gh-actions-write-test" && echo "write ok" || { echo "::error::Cannot write to $APP_DIR"; exit 1; }
      - name: Sync to $APP_DIR (repo files)
        run: |
          set -euo pipefail
          shopt -s dotglob nullglob
          rm -rf "${APP_DIR:?}/"*
          cp -a ./* "$APP_DIR"/
          echo "Copied repo to $APP_DIR"
      # - name: Provision environment files (.env, .env.local)
      #   run: |
      #     set -euo pipefail
      #     SRC="${ENV_SOURCE_DIR}"
      #     echo "Using ENV_SOURCE_DIR=$SRC"
      #     for f in .env .env.local; do
      #       if [ -f "$SRC/$f" ]; then
      #         # copy and secure perms (rw-------)
      #         cp -f "$SRC/$f" "$APP_DIR/$f"
      #         chmod 600 "$APP_DIR/$f"
      #         echo "✓ Copied $f to $APP_DIR"
      #       else
      #         echo "::warning file=$SRC/$f::$f not found at $SRC (skipping)"
      #       fi
      #     done
      #     ls -l "$APP_DIR"/.env* || true
      - name: Sync env bundle to $APP_DIR
        run: |
          set -euo pipefail
          SRC="${ENV_SOURCE_DIR:-/home/manage/env-nusa}"
          DEST="${APP_DIR:-/opt/nnp-web}"
          echo "Syncing from $SRC -> $DEST"
          mkdir -p "$DEST"
          # copy EVERYTHING incl. dotfiles (.env, .env.local, ecosystem.config.cjs, etc.)
          cp -af "$SRC"/. "$DEST"/
      
          # lock down .env files if present
          find "$DEST" -maxdepth 1 -type f -name ".env*" -exec chmod 600 {} +
      
          echo "✓ Copied:"
          ls -la "$DEST"

      - name: Install deps (include dev)
        working-directory: ${{ env.APP_DIR }}
        run: npm ci --no-audit --no-fund

      - name: Build (Tailwind plugin in devDependencies)
        working-directory: ${{ env.APP_DIR }}
        env:
          NODE_ENV: development
        run: npm run build

      - name: Prune dev deps for runtime
        working-directory: ${{ env.APP_DIR }}
        run: npm prune --omit=dev

      - name: Ensure pm2 (local, no jq needed)
        working-directory: ${{ env.APP_DIR }}
        run: |
          if [ ! -d "node_modules/pm2" ]; then
            npm i -E pm2@latest
          fi
      - name: Restart app with PM2 (local)
        working-directory: ${{ env.APP_DIR }}
        env:
          PM2_HOME: ${{ env.PM2_HOME }}
        run: |
          echo "PM2_HOME=$PM2_HOME"
          which pm2 || true
          npx pm2 -v || true
          npx pm2 delete "${PM2_NAME}" || true
          npx pm2 start "react-router-serve ./${BUILD_DIR}/server/index.js" --name "${PM2_NAME}" --update-env
          # npx pm2 start "npm run start ./${BUILD_DIR}/server/index.js" --name "${PM2_NAME}" --update-env
          # npx pm2 start "npm run start" --env staging --name "${PM2_NAME}" --update-env
          # npx pm2 start ecosystem.config.cjs --env staging --only "${PM2_NAME}" --update-env
          npx pm2 save
          npx pm2 status || true
